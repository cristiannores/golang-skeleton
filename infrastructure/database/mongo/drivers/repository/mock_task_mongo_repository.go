// Code generated by MockGen. DO NOT EDIT.
// Source: task_mongo_repository.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	models "api-bff-golang/infrastructure/database/mongo/drivers/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTaskMongoRepositoryInterface is a mock of TaskMongoRepositoryInterface interface.
type MockTaskMongoRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMongoRepositoryInterfaceMockRecorder
}

// MockTaskMongoRepositoryInterfaceMockRecorder is the mock recorder for MockTaskMongoRepositoryInterface.
type MockTaskMongoRepositoryInterfaceMockRecorder struct {
	mock *MockTaskMongoRepositoryInterface
}

// NewMockTaskMongoRepositoryInterface creates a new mock instance.
func NewMockTaskMongoRepositoryInterface(ctrl *gomock.Controller) *MockTaskMongoRepositoryInterface {
	mock := &MockTaskMongoRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTaskMongoRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskMongoRepositoryInterface) EXPECT() *MockTaskMongoRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteByTitle mocks base method.
func (m *MockTaskMongoRepositoryInterface) DeleteByTitle(title string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTitle", title)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByTitle indicates an expected call of DeleteByTitle.
func (mr *MockTaskMongoRepositoryInterfaceMockRecorder) DeleteByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTitle", reflect.TypeOf((*MockTaskMongoRepositoryInterface)(nil).DeleteByTitle), title)
}

// FindAll mocks base method.
func (m *MockTaskMongoRepositoryInterface) FindAll() ([]models.TaskMongoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]models.TaskMongoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTaskMongoRepositoryInterfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTaskMongoRepositoryInterface)(nil).FindAll))
}

// GetByTitle mocks base method.
func (m *MockTaskMongoRepositoryInterface) GetByTitle(title string) (models.TaskMongoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", title)
	ret0, _ := ret[0].(models.TaskMongoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockTaskMongoRepositoryInterfaceMockRecorder) GetByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockTaskMongoRepositoryInterface)(nil).GetByTitle), title)
}

// Insert mocks base method.
func (m *MockTaskMongoRepositoryInterface) Insert(task models.TaskMongoModel) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", task)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTaskMongoRepositoryInterfaceMockRecorder) Insert(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTaskMongoRepositoryInterface)(nil).Insert), task)
}
